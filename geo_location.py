import subprocess
import geoip2.database


def geo_locate_current_connections(window):
    pass_fail = True
    country_dict = {}

    DEVNULL = subprocess.DEVNULL
    script_path = ".\\network_connections.ps1"
    remote_addresses = subprocess.check_output(
        ["powershell.exe", "PowerShell -ExecutionPolicy Bypass", script_path],
        shell=True,
        stderr=DEVNULL,
        stdin=DEVNULL)

    # format output
    remote_addresses_string = str(remote_addresses, "utf-8")
    remote_addresses_list = remote_addresses_string.split("\r\n")
    for i, new_value in enumerate(remote_addresses_list):
        remote_addresses_list[i] = new_value.strip()

    # strip unnecessary items
    remote_addresses_list = remote_addresses_list[3:-3]

    # convert array into dict
    remote_addresses_dict = {}
    for i in remote_addresses_list:
        new_list = i.split("{")
        new_list[0] = new_list[0].strip()
        new_list[1] = new_list[1].strip("}")
        process_array = new_list[1].split(",")
        remote_addresses_dict[new_list[0]] = process_array

    # set up database reader with path
    # This product includes GeoLite2 data created by MaxMind, available from
    # https://www.maxmind.com
    file_to_open = "GeoLite2-Country.mmdb"
    reader = geoip2.database.Reader(file_to_open)

    for i in remote_addresses_dict:
        # check for real values
        if i:
            if i[0].isdigit():
                reserved_address_space = [
                    "0.",
                    "127.",
                    "10.",
                    "169.254.",
                    "172.16.",
                    "172.17.",
                    "172.18.",
                    "192.0.0.",
                    "192.0.2.",
                    "172.19.",
                    "172.20.",
                    "172.21",
                    "203.0.113.",
                    "172.22",
                    "172.23",
                    "172.24",
                    "172.25",
                    "172.26",
                    "172.27",
                    "172.28",
                    "172.29",
                    "172.30",
                    "172.31",
                    "172.32",
                    "198.19.",
                    "255.",
                    "192.168.",
                    "198.18.",
                    "192.88.99.",
                    "198.51.100.",
                    "224.",
                    "225.",
                    "226.",
                    "227.",
                    "228.",
                    "229.",
                    "230.",
                    "231.",
                    "232.",
                    "233.",
                    "234.",
                    "235.",
                    "236.",
                    "237.",
                    "238.",
                    "239."]
                is_real_address = True
                for address in reserved_address_space:
                    if i.startswith(address):
                        is_real_address = False
                        break

                try:
                    if is_real_address:
                        try:
                            response = reader.country(i)
                            string_test = str(response)
                            country_offset = string_test.find("country")
                            english_name = string_test.find("en", country_offset)
                            name_length = string_test[english_name + 6:].find("'")
                            new_country_name = string_test[(
                                english_name + 6): (english_name +
                                                    6 + name_length)]
                            # Sometimes there will be a malformed country name
                            # Usually occurs with IPv6 addresses
                            # Needs further testing
                            country_dict[i] = new_country_name
                            is_real_address = True
                        except ValueError:
                            pass
                except geoip2.errors.AddressNotFoundError:
                    pass

    suspicious_countries = window.get_selection_box_input("Suspicious Connections", list(set(list(country_dict.values()))))

    # Check for suspicious countries
    suspicious_country = []
    suspicious_processes = []
    for key in country_dict:
        for country in suspicious_countries:
            if country == country_dict[key]:
                pass_fail = False
                if country not in suspicious_country:
                    suspicious_country.append(country)
                # determine what process connected to them
                for key2 in remote_addresses_dict:
                    if key2 == key:
                            suspicious_processes.extend(remote_addresses_dict[key2])

    # remove duplicate processes by converting the list to a dict and back again
    suspicious_processes = list(dict.fromkeys(suspicious_processes))
    if not pass_fail:
        output = (
            False,
            "Please investigate further. "
            "You are connected to the following suspicious countries: " +
            ', '.join(suspicious_country) + " from the following programs: " +
            ', '.join(suspicious_processes) +
            ".")
    else:
        output = (
            True,
            "Your computer is not connected to any suspicious locations.")

    return output
