import os, sys, FirewallStatus, AdminPassword, geoLocation, portscanning, SSH_check, VersionCheck
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import pyqtSignal, QRunnable, QThreadPool, QObject
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QDialog, QAbstractItemView, QWidget, QInputDialog


class MainWindow(QWidget):
    def setup_ui(self, Dialog):
        self.threadpool = QThreadPool()
        Dialog.setObjectName("Dialog")
        Dialog.resize(640, 280)
        Dialog.setWindowIcon(QIcon(resource_path('icon.ico')))
        self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        self.buttonBox.setGeometry(QtCore.QRect(10, 240, 621, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Close)
        self.buttonBox.setObjectName("buttonBox")
        self.horizontalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 621, 221))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.listWidget = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.listWidget.setObjectName("listWidget")
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item2 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item2)
        item3 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item3)
        item4 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item4)
        item5 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item5)
        self.verticalLayout.addWidget(self.listWidget)
        self.label2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label2.setAlignment(QtCore.Qt.AlignCenter)
        self.label2.setObjectName("label2")
        self.verticalLayout.addWidget(self.label2)
        self.listWidget2 = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.listWidget2.setObjectName("listWidget")
        item6 = QtWidgets.QListWidgetItem()
        self.listWidget2.addItem(item6)
        item7 = QtWidgets.QListWidgetItem()
        self.listWidget2.addItem(item7)
        self.verticalLayout.addWidget((self.listWidget2))
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout.addLayout(self.verticalLayout)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout2 = QtWidgets.QVBoxLayout()
        self.verticalLayout2.setObjectName("verticalLayout2")
        self.horizontalLayout.addItem(self.verticalLayout2)
        self.textBrowser = QtWidgets.QTextBrowser(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        self.textBrowser.setMinimumSize(QtCore.QSize(300, 0))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setOpenExternalLinks(True)
        self.verticalLayout2.addWidget(self.textBrowser)
        spacerItem = QtWidgets.QSpacerItem(40, 5, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout2.addItem(spacerItem)
        self.progress_bar = QtWidgets.QProgressBar(self.horizontalLayoutWidget)
        self.progress_bar.setAlignment(QtCore.Qt.AlignHCenter)
        self.progress_bar.setFormat('')
        self.progress_bar.setObjectName("progressBar")
        self.verticalLayout2.addWidget(self.progress_bar)
        self.retranslate_ui(Dialog)
        self.buttonBox.accepted.connect(Dialog.accept)
        self.buttonBox.rejected.connect(Dialog.reject)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslate_ui(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Vulnerability Scanner"))
        Dialog.setWindowFlag(QtCore.Qt.WindowCloseButtonHint)
        self.label.setText(_translate("Dialog", "Simple Tests"))
        self.label2.setText(_translate("Dialog", "Complex Tests"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        self.listWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        item = self.listWidget.item(0)
        item.setText(_translate("Dialog", "Default (Runs All Simple Tests)"))
        item2 = self.listWidget.item(1)
        item2.setText(_translate("Dialog", "Firewall Status"))
        item3 = self.listWidget.item(2)
        item3.setText(_translate("Dialog", "Scan Ports"))
        item4 = self.listWidget.item(3)
        item4.setText(_translate("Dialog", "SSH Check"))
        item5 = self.listWidget.item(4)
        item5.setText(_translate("Dialog", "Version Check"))
        item6 = self.listWidget2.item(0)
        item6.setText(_translate("Dialog", "Admin Password Check"))
        item7 = self.listWidget2.item(1)
        item7.setText(_translate("Dialog", "Geolocation Scan"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("Dialog", "Run"))
        self.pushButton.clicked.connect(lambda: get_selected_value(self))
        self.listWidget.itemClicked.connect(lambda: select_one(self, 0))
        self.listWidget2.itemClicked.connect(lambda: select_one(self, 1))

    def get_input(self, input_type):
        text, ok = QInputDialog.getText(self, "User Input", input_type)
        return text


class WorkerSignals(QObject):
    finished = pyqtSignal()
    result = pyqtSignal(tuple)


class Worker(QRunnable):
    def __init__(self, fn, *args):
        super(Worker, self).__init__()
        self.fn = fn
        self.args = args
        self.signals = WorkerSignals()

    def run(self):
        self.signals.result.emit(self.fn(*self.args))
        self.signals.finished.emit()


def select_one(gui, widget):
    if widget == 0:
        gui.listWidget2.clearSelection()
    if widget == 1:
        gui.listWidget.clearSelection()


def get_selected_value(gui):
    try:
        run_test(gui, gui.textBrowser, gui.listWidget.selectedIndexes()[0].data(), True)
    except IndexError:
        run_test(gui, gui.textBrowser, gui.listWidget2.selectedIndexes()[0].data(), True)


def test_switch(window, i):
    switch = {
        "Default": run_all_tests,
        "Firewall": FirewallStatus.check_firewall_status,
        "Admin": AdminPassword.check_admin_password,
        "Scan": portscanning.open_ports,
        "SSH": SSH_check.check_port22,
        "Version": VersionCheck.check_build,
        "Geolocation": geoLocation.geo_locate_current_connections
    }
    func = switch.get(i, "Error: Unable to run test. Please try again.")
    if i == "Admin" or i == "Default":
        return func(window)
    return func()


def output_result(val, output):
    if val[0]:
        output.append("<h1>Passed!</h1>")
    elif val[0] == None:
        pass
    else:
        output.append("<h1>Failed.</h1>")
    output.append(val[1])


def run_test(gui, output, val, clear):
    gui.progress_bar.setMaximum(0)
    if clear:
        output.clear()
    try:
        val = val.split()[0]
        if val == "Admin":
            output_result(test_switch(gui, val), output)
            gui.progress_bar.setMaximum(1)
            gui.progress_bar.setValue(1)
        else:
            worker = Worker(test_switch, gui, val)
            gui.threadpool.start(worker)
            worker.signals.result.connect(lambda x: output_result(x, output))
            worker.signals.finished.connect(lambda: (gui.progress_bar.setMaximum(1), gui.progress_bar.setValue(1)))
    except AttributeError:
        output.append("Please select test")


def run_all_tests(gui):
    tests = ["Firewall", "SSH", "Version", "Scan"]
    gui.textBrowser.append("Hold tight! This may take a while...")
    for i in tests:
        run_test(gui, gui.textBrowser, i, False)
    return (None, "")


def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.environ.get("_MEIPASS2",os.path.abspath("."))

    return os.path.join(base_path, relative_path)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    gui = QDialog(None, QtCore.Qt.WindowSystemMenuHint | QtCore.Qt.WindowTitleHint)
    MainWindow().setup_ui(gui)
    gui.show()
    sys.exit(app.exec_())
