import gui, math


def check_admin_password(window):
    password = window.get_input("Enter Password:")
    pass_fail = True

    filepath = gui.resource_path('common_password_list')
    with open(filepath) as fp:
        for test, line in enumerate(fp):
            line = fp.readline()
            line = line.rstrip('\n')
            if line == password:
                pass_fail = False
                break

    link = "<a href='https://support.microsoft.com/en-us/help/" \
           "4490115/windows-change-or-reset-your-password'>Link</a>"

    if not pass_fail:
        output = (
            1,
            "Your Administrator password matches on of "
            "the top 500 most common passwords. "
            "Follow the steps here: {}, "
            "to change it to something more secure.".format(link))

        return output

    # Instantly fails test if it is less than 8 characters
    if len(password) < 8:
        output = (1, "Your password is less than 8 characters. Please create a longer password "
                     "and follow the steps here: {} "
                     "to update it.".format(link))
        return output

    features = {"length": len(password), "uppercase letters": 0, "lowercase letters": 0, "numbers": 0, "symbols": 0,
                "middle numbers/symbols": 0, "shannon entropy": 0, "letters only": False, "numbers only": False,
                "repeat characters": 0, "consecutive uppercase": 0, "consecutive lowercase": 0,
                "consecutive numbers": 0, "sequential letters": 0, "sequential numbers": 0, "sequential symbols": 0,
                "repeat chars": 0, "only first char uppercase": False, "only last char number": False,
                "only last char symbol": False}

    previous = None

    # check uppercase, lowercase, numbers, symbols, middle numbers/symbols, and consecutive characters
    for i in range(0, len(password)):
        letter = password[i]

        if i > 0 and letter.lower() == previous.lower():
            features["repeat chars"] += 1

        if letter.isupper():
            features["uppercase letters"] += 1
            if i > 0 and previous.isupper():
                features["consecutive uppercase"] += 1
                if ord(letter) == ord(previous) + 1 or ord(letter) == ord(previous) - 1:
                    features["sequential letters"] += 1
        elif letter.islower():
            features["lowercase letters"] += 1
            if i > 0 and previous.islower():
                features["consecutive lowercase"] += 1
                if ord(letter) == ord(previous) + 1 or ord(letter) == ord(previous) - 1:
                    features["sequential letters"] += 1
        elif letter.isdigit():
            features["numbers"] += 1
            if 0 < i < len(password) - 1:
                features["middle numbers/symbols"] += 1
            if i > 0 and previous.isdigit():
                features["consecutive numbers"] += 1
                if int(letter) == int(previous) + 1 or int(letter) == int(previous) - 1:
                    features["sequential numbers"] += 1
        else:
            features["symbols"] += 1
            if 0 < i < len(password) - 1:
                features["middle numbers/symbols"] += 1

            if ord(letter) == ord(previous) + 1 or ord(letter) == ord(previous) - 1:
                features["sequential symbols"] += 1

        previous = password[i]

    # TODO:check shannon entropy
    frequency = {}
    for i in range(len(password)):
        frequency[password[i]] = password.count(password[i])/len(password)
    for i in frequency.values():
        features["shannon entropy"] += i * math.log(1/i, 2)

    # check for a letters only or numbers only password
    if features["length"] == features["uppercase letters"] + features["lowercase letters"]:
        features["letters only"] = True
    elif features["length"] == features["numbers"]:
        features["numbers only"] = True

    # check for first char uppercase, last char number, and last char symbol
    if password[0].isupper() and features["uppercase letters"] == 1:
        features["only first char uppercase"] = True

    if password[-1].isdigit() and features["numbers"] == 1:
        features["only last char number"] = True
    elif not password[-1].isalnum():
        features["only last char symbol"] = True

    minimum_req_score = 0
    if features["uppercase letters"] > 0: minimum_req_score += 1
    if features["lowercase letters"] > 0: minimum_req_score += 1
    if features["numbers"] > 0: minimum_req_score += 1
    if features["symbols"] > 0: minimum_req_score += 1

    # Add to score for positive features
    strength = features["length"] * 4
    strength += (features["length"] - features["uppercase letters"]) * 2
    strength += (features["length"] - features["lowercase letters"]) * 2
    strength += features["numbers"] * 4
    strength += features["symbols"] * 6
    strength += features["middle numbers/symbols"] * 2
    strength += features["shannon entropy"]

    # Subtract from score for negative features
    if features["letters only"]: strength -= features["length"]
    if features["numbers only"]: strength -= features["length"] * 16
    strength -= features["repeat characters"]
    strength -= features["consecutive uppercase"] * 2
    strength -= features["consecutive lowercase"] * 2
    strength -= features["consecutive numbers"] * 2
    if features["sequential letters"] > 3: strength -= features["sequential letters"] * 3
    if features["sequential numbers"] > 3: strength -= features["sequential numbers"] * 3
    if features["sequential symbols"] > 3: strength -= features["sequential symbols"]
    if features["only first char uppercase"]: strength -= features["length"]
    if features["only last char number"]: strength -= features["length"]
    if features["only last char symbol"]: strength -= features["length"]

    two_star = 60
    three_star = 70
    four_star = 80
    five_star = 90

    if strength > 100:
        strength = 100
    elif strength < 0:
        strength = 0

    if strength >= five_star:
        output = (5, "Score: {} \nYour password is extremely secure and exceeds standards.".format(str(strength)))
    elif strength >= four_star:
        output = (4, "Score: {} \nYour password is very secure and meets most standards.".format(str(strength)))
    elif strength >= three_star:
        output = (3, "Score: {} \nYour password is relatively secure. "
                     "To improve it even more, you can follow these steps: {} "
                     "to update it.".format(str(strength), link))
    elif strength >= two_star:
        output = (2, "Score: {} \nYour password passes the test, but could be improved on. "
                     "Consider following the steps here: {} "
                     "to update it.".format(str(strength), link))
    else:
        output = (1, "Score: {} \nYour password is extremely vulnerable. "
                     "Please follow the steps here: {} "
                     "to update it.".format(str(strength), link))
    return output



