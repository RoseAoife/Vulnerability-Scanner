import subprocess
import geoip2.database


def geo_locate_current_connections():
    pass_fail = True
    country_dict = {}

    remote_addresses = subprocess.check_output(["powershell.exe",
                                                "Get-NetTCPConnection | select RemoteAddress"])
    remote_addresses_string = str(remote_addresses, "utf-8")
    remote_addresses_list = remote_addresses_string.split("\r\n")
    for i, new_value in enumerate(remote_addresses_list):
        remote_addresses_list[i] = new_value.strip()

    # set up database reader with path
    # This product includes GeoLite2 data created by MaxMind, available from
    # https://www.maxmind.com
    file_to_open = "GeoLite2-Country.mmdb"
    reader = geoip2.database.Reader(file_to_open)

    for i in remote_addresses_list:
        # check for real values
        if i:
            if i[0].isdigit():
                reserved_address_space = ["0.", "127.", "10.", "169.254.", "172.16.", "172.17.", "172.18.",
                                          "192.0.0.", "192.0.2.", "172.19.", "172.20.", "172.21", "203.0.113.",
                                          "172.22", "172.23", "172.24", "172.25", "172.26", "172.27",
                                          "172.28", "172.29", "172.30", "172.31", "172.32", "198.19.",
                                          "255.", "192.168.", "198.18.", "192.88.99.", "198.51.100.",
                                          "224.", "225.", "226.", "227.", "228.", "229.", "230.", "231.",
                                          "232.", "233.", "234.", "235.", "236.", "237.", "238.", "239."]
                for address in reserved_address_space:
                    if i.startswith(address):
                        break
                    else:
                        print(address, i, i.startswith(address))
                        response = reader.country(i)
                        string_test = str(response)
                        country_offset = string_test.find("country")
                        english_name = string_test.find("en", country_offset)
                        name_length = string_test[english_name + 6:].find("'")
                        new_country_name = string_test[(english_name + 6):
                                                       (english_name + 6 + name_length)]
                        # Sometimes there will be a malformed country name
                        # Usually occurs with IPv6 addresses
                        # Needs further testing
                        country_dict[i] = new_country_name

    # Check for suspicious countries, update list as needed
    suspicious_country = []
    if "Russia" in country_dict.values():
        pass_fail = False
        suspicious_country.append("Russia")
    if "China" in country_dict.values():
        pass_fail = False
        suspicious_country.append("China")

    if not pass_fail:
        output = (False, "Please investigate further. "
                         "You are connected to the following suspicious countries: " +
                  ', '.join(suspicious_country) + ".")
    else:
        output = (True,
                  "Your computer is not connected to any suspicious locations.")

    return output

geo_locate_current_connections()
