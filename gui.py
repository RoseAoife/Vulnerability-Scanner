import os
import re
import sys
import html
import firewall_status
import admin_password
import geo_location
import port_scanning
import ssh_check
import version_check
from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtCore import pyqtSignal, QRunnable, QThreadPool, QObject, QPoint
from PyQt5.QtGui import QIcon, QLinearGradient, QColor, QPalette, QBrush, QPixmap, QWindow
from PyQt5.QtWidgets import QApplication, QDialog, \
    QAbstractItemView, QWidget, QInputDialog, QHBoxLayout, QLabel, QVBoxLayout, QPushButton, QDesktopWidget, QScrollBar, \
    QScrollArea, QCheckBox


class MainWindow(QWidget):
    def setup_ui(self, Dialog):
        self.threadpool = QThreadPool()
        self.setMouseTracking(True)
        Dialog.setObjectName("Dialog")
        Dialog.resize(640, 280)
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 640, 251))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayoutMain = QtWidgets.QVBoxLayout(
            self.verticalLayoutWidget)
        self.verticalLayoutMain.setContentsMargins(0, 0, 0, 0)
        self.verticalLayoutMain.setObjectName("verticalLayoutMain")
        # Title Bar
        self.verticalLayoutMain.addWidget(TitleBar(Dialog))
        # Spacer
        spacerItem = QtWidgets.QSpacerItem(
            0, 15, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayoutMain.addItem(spacerItem)
        # Horizontal Layout
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(1, 0, 10, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        ## Left Side of Program
        self.verticalLayoutMain.addLayout(self.horizontalLayout)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(0,0,35,0)
        self.verticalLayout.setObjectName("verticalLayout")
        ### Simple Test Label
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setAlignment(QtCore.Qt.AlignLeft)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        ### Simple Tests
        self.listWidget = QtWidgets.QListWidget(self.verticalLayoutWidget)
        self.listWidget.setObjectName("listWidget")
        item1 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item1)
        item2 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item2)
        item3 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item3)
        item4 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item4)
        item5 = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item5)
        self.verticalLayout.addWidget(self.listWidget)
        ### Complex Test Label
        self.label2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label2.setAlignment(QtCore.Qt.AlignLeft)
        self.label2.setObjectName("label2")
        self.verticalLayout.addWidget(self.label2)
        ### Complex Tests
        self.listWidget2 = QtWidgets.QListWidget(self.verticalLayoutWidget)
        self.listWidget2.setObjectName("listWidget")
        item6 = QtWidgets.QListWidgetItem()
        self.listWidget2.addItem(item6)
        item7 = QtWidgets.QListWidgetItem()
        self.listWidget2.addItem(item7)
        self.verticalLayout.addWidget((self.listWidget2))
        ### Run Button
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed,
            QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(
            self.pushButton, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout.addLayout(self.verticalLayout)
        ## Spacer
        spacerItem = QtWidgets.QSpacerItem(
            5, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        ## Right Side of Program
        self.verticalLayout2 = QtWidgets.QVBoxLayout()
        self.verticalLayout2.setObjectName("verticalLayout2")
        self.verticalLayout2.setContentsMargins(0,0,18,0)
        self.horizontalLayout.addItem(self.verticalLayout2)
        ### Output Window
        self.textBrowser = QtWidgets.QTextBrowser(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed,
            QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.textBrowser.sizePolicy().hasHeightForWidth())
        self.textBrowser.setSizePolicy(sizePolicy)
        self.textBrowser.setMinimumSize(QtCore.QSize(400, 0))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setOpenExternalLinks(True)
        self.verticalLayout2.addWidget(self.textBrowser)
        ### Spacer
        spacerItem = QtWidgets.QSpacerItem(
            40, 5, QtWidgets.QSizePolicy.Preferred,
            QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout2.addItem(spacerItem)
        ### Progress Bar
        self.progress_bar = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        self.progress_bar.setAlignment(QtCore.Qt.AlignHCenter)
        self.progress_bar.setFormat('')
        self.progress_bar.setObjectName("progressBar")
        self.verticalLayout2.addWidget(self.progress_bar)
        self.retranslate_ui(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslate_ui(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Vulnerability Scanner"))
        Dialog.setWindowFlags(QtCore.Qt.WindowCloseButtonHint | QtCore.Qt.FramelessWindowHint)
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        self.listWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        self.label.setText(_translate("Dialog", "<b>Simple Tests</b>"))
        self.label2.setText(_translate("Dialog", "<b>Complex Tests</b>"))
        item1 = self.listWidget.item(0)
        item1.setText(_translate("Dialog", "   Default"))
        item2 = self.listWidget.item(1)
        item2.setText(_translate("Dialog", "   Firewall Status"))
        item3 = self.listWidget.item(2)
        item3.setText(_translate("Dialog", "   Scan Ports"))
        item4 = self.listWidget.item(3)
        item4.setText(_translate("Dialog", "   SSH Check"))
        item5 = self.listWidget.item(4)
        item5.setText(_translate("Dialog", "   Version Check"))
        item6 = self.listWidget2.item(0)
        item6.setText(_translate("Dialog", "   Admin Password Check"))
        item7 = self.listWidget2.item(1)
        item7.setText(_translate("Dialog", "   Geolocation Scan"))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.pushButton.setText(_translate("Dialog", "Run"))
        self.pushButton.clicked.connect(lambda: get_selected_value(self))
        self.listWidget.itemClicked.connect(lambda: select_one(self, 0))
        self.listWidget2.itemClicked.connect(lambda: select_one(self, 1))
        Dialog.setStyleSheet(
            "QWidget#Dialog { background: qlineargradient(spread:pad, x1:0, y1:0, x2:.575, y2:0, " \
            "stop:0 rgb(245, 245, 245), stop:0.499 rgb(245, 245, 245), stop:0.501 white, stop:1 white);" \
            " border: 1px solid black; }"
        )
        self.label.setStyleSheet("QWidget#label { margin-left: 5px; }")
        self.label2.setStyleSheet("QWidget#label2 { margin-left: 5px; }")
        self.listWidget.setStyleSheet(
            "QWidget#listWidget { background-color: rgb(245, 245, 245); outline: 0; border: none; }" \
            "QWidget#listWidget::item:hover { background-color: rgb(225, 225, 225); }" \
            "QWidget#listWidget::item:selected:hover { background: qlineargradient(spread:pad, x1:0, y1:0, x2:.65, y2:0, " \
            "stop:0 rgb(0, 76, 255), stop:0.025 rgb(0, 76, 255), stop:0.03 rgb(225, 225, 225), stop:1 rgb(225, 225, 225)); color: black; }"
            "QWidget#listWidget::item:selected { background: qlineargradient(spread:pad, x1:0, y1:0, x2:.65, y2:0, " \
            "stop:0 rgb(0, 76, 255), stop:0.025 rgb(0, 76, 255), stop:0.03 rgb(245, 245, 245), stop:1 rgb(245, 245, 245)); color: black; }" \
        )
        self.listWidget2.setStyleSheet(
            "QWidget#listWidget { background-color: rgb(245, 245, 245); outline: 0; border: none; }" \
            "QWidget#listWidget::item:hover { background-color: rgb(225, 225, 225); }" \
            "QWidget#listWidget::item:focus { background: qlineargradient(spread:pad, x1:0, y1:0, x2:.65, y2:0, " \
            "stop:0 rgb(0, 76, 255), stop:0.025 rgb(0, 76, 255), stop:0.03 rgb(245, 245, 245), stop:1 rgb(245, 245, 245)); color: black; }"
        )
        self.textBrowser.verticalScrollBar().setStyleSheet("QScrollBar:vertical { width: 10px; background-color: rgb(245, 245, 245); }" \
                                                          "QScrollBar::handle:vertical { background-color: rgb(205, 205, 205); border-radius: 4px; }" \
                                                          "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical { background: none; border: none; }" \
                                                          "QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height: 0px; }")
        self.listWidget.verticalScrollBar().setStyleSheet("QScrollBar:vertical { width: 10px; background-color: rgb(245, 245, 245); }" \
                                                          "QScrollBar::handle:vertical { background-color: rgb(205, 205, 205); border-radius: 4px; }" \
                                                          "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical { background: none; border: none; }" \
                                                          "QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height: 0px; }")
        self.listWidget2.verticalScrollBar().setStyleSheet(
            "QScrollBar:vertical { width: 10px; background-color: rgb(245, 245, 245); }" \
            "QScrollBar::handle:vertical { background-color: rgb(205, 205, 205); border-radius: 4px; }" \
            "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical { background: none; border: none; }" \
            "QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height: 0px; }")
        self.listWidget.setVerticalScrollMode(QAbstractItemView.ScrollPerPixel)
        self.textBrowser.append('<h1>Vulnerability Scanner</h1>Select a test to run.')

    def get_text_input(self, input_type):
        text, ok = QInputDialog.getText(self, "User Input", input_type, flags=QtCore.Qt.WindowFlags(QtCore.Qt.WindowTitleHint))
        return text

    def get_selection_box_input(self, input_type, input_list):
        return CheckboxDialog(input_type, input_list).get_results()


class TitleBar(QWidget):
    def __init__(self, parent):
        super(TitleBar, self).__init__()
        self.parent = parent
        self.pressing = False
        self.start = QPoint(0,0)
        # Title Bar
        self.horizontalLayoutTitleBar = QtWidgets.QHBoxLayout()
        self.horizontalLayoutTitleBar.setContentsMargins(10, 1, 1, 0)
        self.horizontalLayoutTitleBar.setObjectName("horizontalLayoutTitleBar")
        self.horizontalLayoutTitleBar.setSpacing(0)
        self.setLayout(self.horizontalLayoutTitleBar)
        ## Icon
        self.icon = QtWidgets.QLabel()
        self.icon.setAlignment(QtCore.Qt.AlignHCenter)
        self.icon.setAlignment(QtCore.Qt.AlignVCenter)
        self.icon.setObjectName("icon")
        self.icon.setScaledContents(True)
        self.icon.setMaximumSize(16, 16)
        self.horizontalLayoutTitleBar.addWidget(self.icon)
        ## Spacer
        spacerItem = QtWidgets.QSpacerItem(
            5, 30, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayoutTitleBar.addItem(spacerItem)
        ## Title
        self.title = QtWidgets.QLabel()
        self.title.setAlignment(QtCore.Qt.AlignLeft)
        self.title.setAlignment(QtCore.Qt.AlignVCenter)
        self.title.setFixedHeight(30)
        self.title.setObjectName("title")
        self.horizontalLayoutTitleBar.addWidget(self.title)
        ## Minimize
        self.minimize = QtWidgets.QPushButton()
        self.minimize.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum,
            QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.minimize.setSizePolicy(sizePolicy)
        self.minimize.setMaximumSize(30, 30)
        self.minimize.setObjectName("minimize")
        self.horizontalLayoutTitleBar.addWidget(self.minimize)
        ## Close
        self.close = QtWidgets.QPushButton()
        self.close.setEnabled(True)
        self.close.setSizePolicy(sizePolicy)
        self.close.setMaximumSize(30, 30)
        self.close.setObjectName("close")
        self.horizontalLayoutTitleBar.addWidget(self.close)
        # Translate UI
        self.icon.setPixmap(QPixmap("icon.ico"))
        self.title.setText("Vulnerability Scanner")
        self.close.setText(html.unescape("&times;"))
        self.minimize.setText(html.unescape("&minus;"))
        self.close.clicked.connect(self.parent.close)
        self.minimize.clicked.connect(self.parent.showMinimized)
        self.minimize.setStyleSheet("QWidget#minimize {background-color: white; border: none;}" \
                                    "QWidget#minimize:hover {background-color: rgb(245, 245, 245); }")
        self.close.setStyleSheet("QWidget#close {background-color: white; border: none; }" \
                                 "QWidget#close:hover {background-color: #f50a1e; color: white}")

    def mousePressEvent(self, event):
        self.start = self.mapToGlobal(event.pos())
        self.pressing = True

    def mouseMoveEvent(self, event):
        if self.pressing:
            self.end = self.mapToGlobal(event.pos())
            self.movement = self.end - self.start
            self.parent.setGeometry(self.mapToGlobal(self.movement).x(),
                                    self.mapToGlobal(self.movement).y(),
                                    self.parent.width(),
                                    self.parent.height())
            self.start = self.end

    def mouseReleaseEvent(self, QMouseEvent):
        self.pressing = False


class CheckboxDialog(QDialog):
    def __init__(self, input_type, input_list):
        super(CheckboxDialog, self).__init__()
        self.setObjectName("Dialog")
        self.resize(400, 202)
        self.verticalLayoutWidget = QtWidgets.QWidget(self)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 400, 202))
        self.verticalLayoutMain = QtWidgets.QVBoxLayout(
            self.verticalLayoutWidget)
        self.verticalLayoutMain.setContentsMargins(0, 0, 0, 0)
        # Title Bar
        self.titleBar = TitleBar(self)
        self.verticalLayoutMain.addWidget(self.titleBar)
        # Horizontal Layout
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayoutMain.addLayout(self.horizontalLayout)
        ## Left Side of Program
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(1, 0, 0, 0)
        self.verticalLayout.setAlignment(QtCore.Qt.AlignTop | QtCore.Qt.AlignLeft)
        self.horizontalLayout.addLayout(self.verticalLayout)
        ### Countries Label
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setAlignment(QtCore.Qt.AlignLeft)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed,
            QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.label.setSizePolicy(sizePolicy)
        self.label.setContentsMargins(10, 0, 0, 0)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        ### Checkbox Area
        self.formLayout = QtWidgets.QFormLayout()
        self.scrollBox = QtWidgets.QGroupBox()
        for i in range(len(input_list)):
            checkBox = QCheckBox(input_list[i])
            self.formLayout.addWidget(checkBox)
        self.scrollBox.setLayout(self.formLayout)
        self.scrollBox.setObjectName("scrollBox")
        self.scrollArea = QtWidgets.QScrollArea()
        self.scrollArea.setWidget(self.scrollBox)
        self.scrollArea.setWidgetResizable(True)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed,
            QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.scrollArea.setFixedSize(134, 128)
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setContentsMargins(0, 0, 0, 0)
        self.scrollArea.setObjectName("scrollArea")
        self.verticalLayout.addWidget(self.scrollArea)
        ## Right Side of Program
        self.verticalLayout2 = QtWidgets.QVBoxLayout()
        self.verticalLayout2.setContentsMargins(14, 0, 0, 0)
        self.verticalLayout2.setAlignment(QtCore.Qt.AlignHCenter)
        self.horizontalLayout.addLayout(self.verticalLayout2)
        ### Text Browser
        self.textBrowser = QtWidgets.QTextBrowser()
        self.textBrowser.setFixedSize(200, 120)
        self.textBrowser.setContentsMargins(0, 0, 20, 0)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.append("<h3>Select Suspicious Countries</h3>Select any countries that <b>you</b> consider as suspicious to have connections to. <b>Note:</b> Connections come and go very quickly, so the values listed will change often.")
        self.verticalLayout2.addWidget(self.textBrowser)
        ### Submit Button
        self.submit = QtWidgets.QPushButton("Submit")
        self.submit.setObjectName("submit")
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed,
            QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.submit.sizePolicy().hasHeightForWidth())
        self.submit.setSizePolicy(sizePolicy)
        self.submit.setMinimumSize(20, 20)
        self.verticalLayout2.addWidget(self.submit, 0, QtCore.Qt.AlignHCenter)
        self.retranslate_ui()
        # Spacer
        spacerItem = QtWidgets.QSpacerItem(
            0, 18, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayoutMain.addItem(spacerItem)

    def retranslate_ui(self):
        self.setWindowFlags(QtCore.Qt.WindowTitleHint | QtCore.Qt.WindowCloseButtonHint | QtCore.Qt.FramelessWindowHint)
        self.label.setText("<b>Connected Countries</b>")
        self.setStyleSheet(
            "QWidget#Dialog { background: qlineargradient(spread:pad, x1:0, y1:0, x2:.775, y2:0, " \
            "stop:0 rgb(245, 245, 245), stop:0.499 rgb(245, 245, 245), stop:0.501 white, stop:1 white);" \
            " border: 1px solid black; }"
        )
        self.scrollArea.verticalScrollBar().setStyleSheet(
            "QScrollBar:vertical { width: 10px; background-color: rgb(245, 245, 245); }" \
            "QScrollBar::handle:vertical { background-color: rgb(205, 205, 205); border-radius: 4px; }" \
            "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical { background: none; border: none; }" \
            "QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height: 0px; }")
        self.textBrowser.verticalScrollBar().setStyleSheet(
            "QScrollBar:vertical { width: 10px; background-color: rgb(245, 245, 245); }" \
            "QScrollBar::handle:vertical { background-color: rgb(205, 205, 205); border-radius: 4px; }" \
            "QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical { background: none; border: none; }" \
            "QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical { height: 0px; }")
        self.scrollArea.setStyleSheet(
            "QWidget#scrollArea { background-color: rgb(245, 245, 245); outline: 0; border: none; }")
        self.scrollBox.setStyleSheet(
            "QWidget#scrollBox { background-color: rgb(245, 245, 245); outline: 0; border: none; }")
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.submit.clicked.connect(lambda: self.accept())

    def get_results(self):
        val = []
        if self.exec_() == QDialog.Accepted:
            for i in range(self.formLayout.count()):
                if self.formLayout.itemAt(i).widget().isChecked():
                    val.append(self.formLayout.itemAt(i).widget().text())
            return val
        else:
            return val


class WorkerSignals(QObject):
    finished = pyqtSignal()
    result = pyqtSignal(tuple)


class Worker(QRunnable):
    def __init__(self, fn, *args):
        super(Worker, self).__init__()
        self.fn = fn
        self.args = args
        self.signals = WorkerSignals()

    def run(self):
        self.signals.result.emit(self.fn(*self.args))
        self.signals.finished.emit()


def select_one(gui, widget):
    gui.progress_bar.setValue(0)
    try:
        if widget == 0:
            gui.listWidget2.clearSelection()
            val = gui.listWidget.selectedIndexes()[0].data()
        if widget == 1:
            gui.listWidget.clearSelection()
            val = gui.listWidget2.selectedIndexes()[0].data()
        show_summary(gui, val)
    except IndexError:
        pass


def show_summary(gui, val):
    gui.textBrowser.clear()
    summary = '<h1>' + val + ' Test</h1>'
    with open("summaries.txt") as summaries:
        for line in summaries:
            if line.__contains__('[' + val.strip(' ') + ']'):
                while not summary.endswith(')\n'):
                    summary += summaries.__next__()
        summary = re.sub('[()\n]', ' ', summary).encode('cp1252').decode('utf-8')
        gui.textBrowser.append(summary)
        summaries.close()



def get_selected_value(gui):
    try:
        run_test(
            gui,
            gui.textBrowser,
            gui.listWidget.selectedIndexes()[0].data(),
            True)
    except IndexError:
        try:
            run_test(
                gui,
                gui.textBrowser,
                gui.listWidget2.selectedIndexes()[0].data(),
                True)
        except IndexError:
            pass


def test_switch(window, i):
    switch = {
        "Default": run_all_tests,
        "Firewall": firewall_status.check_firewall_status,
        "Admin": admin_password.check_admin_password,
        "Scan": port_scanning.open_ports,
        "SSH": ssh_check.check_port22,
        "Version": version_check.check_build,
        "Geolocation": geo_location.geo_locate_current_connections
    }
    func = switch.get(i, "Error: Unable to run test. Please try again.")
    if i == "Admin" or i == "Default" or i == "Geolocation":
        return func(window)
    return func()


def output_result(val, output, clear, test):
    if clear:
        output.clear()
    if val[0]:
        output.append("<h1>" + test + " Test</h1><h2>Passed!</h2>")
    elif val[0] is None:
        pass
    else:
        output.append("<h1>" + test + " Test</h1><h2>Failed.</h2>")
    output.append(val[1])


def run_test(gui, output, val, clear):
    gui.progress_bar.setMaximum(0)
    name = val
    val = val.split()[0]
    if val == "Admin" or val == "Geolocation":
        output_result(test_switch(gui, val.split()[0]), output, True, name)
        gui.progress_bar.setMaximum(1)
        gui.progress_bar.setValue(1)
    else:
        worker = Worker(test_switch, gui, val.split()[0])
        gui.threadpool.start(worker)
        worker.signals.result.connect(lambda x: output_result(x, output, clear, val))
        worker.signals.finished.connect(
            lambda: (
                gui.progress_bar.setMaximum(1),
                gui.progress_bar.setValue(1)))


def run_all_tests(gui):
    tests = ["Firewall", "SSH", "Version", "Scan"]
    gui.textBrowser.append("Hold tight! This may take a while...")
    for i in tests:
        run_test(gui, gui.textBrowser, i, False)
    return (None, "")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    gui = QDialog(None, QtCore.Qt.WindowSystemMenuHint |
                  QtCore.Qt.WindowTitleHint)
    MainWindow().setup_ui(gui)
    gui.show()
    sys.exit(app.exec_())
